from guiserver.signals import Signals
from math import isclose

import numpy as np

test_x_svc = [0,0.07181415175,0.09454544202,0.1575689378,0.2010735069,0.2478755546,0.2726766612,0.2808834979,0.2878895685,0.2937294547,0.2984037984,0.3042404822,0.3112593611,0.3182808015,0.3264892398,0.3347316189,0.3423358806,0.376927417,0.4084697588,0.4213180717,0.4309213198,0.4417259747,0.4489344142,0.4786318395,0.5040859894,0.5388610894,0.5892696881,0.6428498582,0.6995710046,0.75]
test_x_hra = [0,0.01408156443,0.03045311907,0.03661927539,0.04982637798,0.07365443966,0.0890473817,0.1024715514,0.1230792622,0.1447447495,0.1724072498,0.2025816537,0.2324720484,0.258626144,0.3005244314,0.3377321847,0.3672249668,0.3969828238,0.4268353511,0.4567636138,0.4752557711,0.5162225261,0.5460182511,0.5761358533,0.6064049275,0.6366929349,0.6661667833,0.6952430179,0.724357121,0.75]
test_x_ivc = [0,0.04461916906,0.09195726677,0.1186341441,0.1453110214,0.1719878983,0.19864443,0.2252455361,0.2450756947,0.2582219002,0.2839115213,0.3173072511,0.3356361995,0.358703588,0.3854225601,0.4120994374,0.4387756127,0.4654314424,0.4920690311,0.518728369,0.5454052463,0.5720996627,0.59877654,0.6167197287,0.6345928997,0.6612290853,0.6851606163,0.7092311874,0.7348966021,0.75]
test_x_lra = [0,0.04746320208,0.08878947547,0.1078291299,0.1274142129,0.1437686799,0.1757495886,0.2204059507,0.2722174539,0.2986620158,0.3181128395,0.3375804452,0.3571487457,0.3768513056,0.3966377776,0.4164410322,0.4363785456,0.456500666,0.476656351,0.4968791662,0.5169509389,0.5367038464,0.556322494,0.5757565352,0.5953416182,0.6347803024,0.6545667745,0.6939718941,0.7335112731,0.75]
test_x_mra = [0,0.04033334003,0.05215255394,0.09180028778,0.1150983592,0.1383297221,0.1611608317,0.1837084288,0.2061226083,0.2247593978,0.2578895895,0.3055582426,0.3251479039,0.3476287918,0.3702264206,0.39294079,0.4155550956,0.4379192434,0.4602833913,0.4827642792,0.5052951989,0.5203714026,0.5657501099,0.6185168234,0.6404807179,0.6621444225,0.6838414813,0.7057553441,0.7278359788,0.75]
test_x_pa  = [0,0.02752495593,0.0470283533,0.09317819829,0.1200084908,0.1468899263,0.2007403301,0.2276950372,0.2546590879,0.2816531356,0.3085906316,0.3354730503,0.3610713918,0.3866271473,0.4135051401,0.4672955496,0.5210879259,0.5480268968,0.5676906097,0.5812503655,0.5960466951,0.6084115289,0.6268654692,0.6525300506,0.6667841844,0.6741971348,0.685081795,0.7008489193,0.7239969312,0.75]
test_x_rv  = [0,0.0619721894,0.0960165226,0.1044724555,0.1163091492,0.1359371414,0.1617112639,0.1866405122,0.2236993628,0.2872642696,0.3239299503,0.3455778188,0.3612379093,0.383420086,0.4092967216,0.4348335647,0.4604015079,0.4861399232,0.5111250354,0.5332826715,0.556423402,0.5824198293,0.6070815627,0.6255823572,0.6391433674,0.6588322428,0.6829900734,0.7071104164,0.7330791992,0.75]
test_x_rvw = [0,0.02383087054,0.05269150715,0.1069680072,0.1327776622,0.1586412072,0.184517925,0.2104233843,0.2363288436,0.2622343028,0.2881397621,0.3140452214,0.3399961873,0.3578692621,0.4162871179,0.4373500338,0.4570018733,0.4692193057,0.4897764945,0.5157130902,0.5416508834,0.5676341839,0.5888442786,0.6004231759,0.6179350165,0.6461014268,0.6720080836,0.6979422844,0.7158129636,0.75]
test_x_rip = [0.0, 0.025862069, 0.051724138, 0.077586207, 0.103448276, 0.129310345, 0.155172414, 0.181034483, 0.206896552, 0.232758621, 0.25862069, 0.284482759, 0.310344828, 0.336206897, 0.362068966, 0.387931034, 0.413793103, 0.439655172, 0.465517241, 0.49137931, 0.517241379, 0.543103448, 0.568965517, 0.594827586, 0.620689655, 0.646551724, 0.672413793, 0.698275862, 0.724137931, 0.75]

test_y_svc = [0.033009709,-0.914563107,0.029126214,0.029126214,-0.937864078,0.03871706,0.089199029,0.128950532,0.173823393,0.210648405,0.239181692,0.277226075,0.317221452,0.356241331,0.395383148,0.42159963,0.467961165,0.495145631,0.483495146,0.455010402,0.415136963,0.369898289,0.337706889,0.165048544,0.07184466,0.029126214,0.033009709,0.029126214,0.029126214,0.033009709]
test_y_hra = [-0.0418918919,-0.0546448186,-0.1011508166,-0.1274533892,-0.3054054054,-0.2256756757,-0.2002619598,-0.1556619454,-0.1018369707,-0.0568049333,-0.0264362625,-0.0207183119,-0.0207183119,-0.0207183119,-0.2581081081,-0.0077576239,-0.0157627547,-0.0184311317,-0.0191935251,-0.0184311317,-0.0222430987,-0.0249114756,-0.0268174592,-0.0222430987,-0.0146191646,-0.0066140338,-0.0150003613,-0.0313918196,-0.0470208845,-0.0418918919]
test_y_ivc = [0.0161281156,-0.0739181619,0.0028748448,0.0026622653,0.0024496858,0.0022371064,0.0030231624,0.0065296392,0.0150824384,0.0244115323,0.030876025,0.0231985398,0.0119231386,0.0018509926,-0.0004277293,-0.0006403088,-0.0008184525,2.04E-06,0.0017178593,0.0023661725,0.002153593,0.0010801208,0.0008675414,0.0085264221,0.0196219864,0.0214066779,0.0156758566,0.0031205043,0.0057975207,0.0161281156]
test_y_lra = [0.0557251908,0.1809160305,-0.0003751438,0.0244039527,0.0310859563,0.0355406253,0.1244274809,-0.2572519084,0.0236641221,0.0388816271,0.0500182997,0.0605981387,0.0678369758,0.070621144,0.070621144,0.0700643104,0.0650528077,0.0539161351,0.0416657953,0.0271881209,0.0177219492,0.0188356164,0.0244039527,0.036097459,0.0427794625,0.0472341315,0.0472341315,0.0528024678,0.0539161351,0.0557251908]
test_y_mra = [0.0142337505,-0.4420343827,0.2224267094,-0.0454506131,-0.0165921063,0.0102093443,0.0246684582,0.0303850835,0.0319875966,0.0320373641,-0.2333997315,0.0365262201,0.024592148,0.0282517173,0.0355111347,0.0463704003,0.0541440818,0.0542038028,0.0542635237,0.057923093,0.0631254543,0.0683079086,0.0884836478,0.1066222378,0.0943396221,0.0728002537,0.0522894134,0.0384640056,0.029781238,0.0142337505]
test_y_pa  = [-0.0233754546,0.0793955529,-0.1152124189,-0.0210052371,-0.0135875708,-0.0119247155,-0.0184485854,-0.0250306036,-0.0326639816,-0.0436727776,-0.0483180806,-0.0467658948,-0.0382909601,-0.0250240385,-0.0229738402,-0.022746874,-0.0227412468,-0.0275525539,-0.0391235132,-0.0516867772,-0.0658274559,-0.0815001561,-0.094509443,-0.0934880954,-0.0741320097,-0.0553526244,-0.0420369332,-0.027848454,-0.018786221,-0.0233754546]
test_y_rv  = [-0.0037731501,-0.6178691783,0.0207552061,0.0344113252,0.048044642,0.0553694543,0.0560995316,0.0518059779,0.0650306748,0.1966012846,0.0458020104,0.0306273824,0.0185901665,0.0064731688,0.0037061337,0.0125306512,0.0202942469,0.0222424196,0.0160431361,0.0047633061,-0.0062081007,-0.0130616493,-0.0082293111,0.0037029628,0.0149224922,0.0201703677,0.0083473358,-0.0021968746,-0.0081073816,-0.0037731501]
test_y_rvw = [-0.0272189349,0.2,-0.5047337278,0.5124768706,0.518799722,0.5215659694,0.5234628248,0.5234628248,0.5234628248,0.5234628248,0.5234628248,0.5234628248,0.5204594704,0.5162969266,0.098816568,0.0792825196,0.0645818903,0.0489960618,0.0386581999,0.0366032732,0.0344693109,0.0293319942,0.0186463755,0.0024598761,-0.0094674556,-0.020223353,-0.0203023886,-0.022199244,-0.0262037165,-0.0272189349]
test_y_rip = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

test_x_svc_2 = [0,0.05366611115,0.09473581923,0.09966924241,0.1447634197,0.1818032623,0.2088572438,0.2270814831,0.2462980528,0.2574092197,0.2641928049,0.2684006816,0.2794105982,0.2861930305,0.2929731553,0.2989031696,0.3056963672,0.3430732854,0.3602432303,0.3860755463,0.3982300403,0.4120329042,0.4229432382,0.4282699844,0.4371528943,0.44423869,0.4486703403,0.4682701843,0.4794404351,0.75]
test_x_hra_2 = [0,0.03578678842,0.1043425186,0.1255000404,0.1464483413,0.1700903681,0.193523174,0.2128892371,0.2622587503,0.2955709494,0.3182191743,0.3412073845,0.3645094266,0.3878114687,0.4111135108,0.4343370946,0.4573514575,0.4804965837,0.5036940147,0.5269175991,0.5501673357,0.5736785993,0.597739069,0.6213810964,0.6447092912,0.6675144321,0.6900005103,0.7122355229,0.7347268319,0.75]
test_x_ivc_2 = [0,0.03506356345,0.07254958807,0.09886822051,0.1251210379,0.1514056633,0.2039811374,0.2292481457,0.2543576984,0.2805856221,0.3022436167,0.3240711008,0.3504709734,0.3767735773,0.4030665007,0.4293594237,0.4556744747,0.4819909085,0.5345892016,0.560860689,0.587076858,0.6048521018,0.6205510552,0.6448820126,0.6647344701,0.6791189616,0.7018781335,0.7214941039,0.7315755699,0.75]
test_x_lra_2 = [0,0.05815561871,0.09890284754,0.1176217057,0.1366859905,0.1559476627,0.1816602032,0.2254291273,0.2853676763,0.3043497169,0.3235126954,0.3427579185,0.3620031417,0.3811661207,0.4004442414,0.4198210558,0.4392472174,0.4588214187,0.4784943132,0.4982165548,0.5181032852,0.5375458953,0.5567582209,0.5758718527,0.5951170759,0.6337555625,0.6725256404,0.7112134736,0.730606737,0.75]
test_x_mra_2 = [0,0.01857063218,0.04705643771,0.05538680883,0.07340885558,0.09349668527,0.1224052949,0.1510453672,0.1756846251,0.2004978099,0.2315233627,0.2615736527,0.2942246439,0.3049054871,0.3332186445,0.361344994,0.3894363162,0.4174108838,0.4452920465,0.4731965609,0.5012061544,0.5293441788,0.5573420975,0.5849430474,0.6120419501,0.6390824751,0.6665082926,0.6928794202,0.7218736505,0.75]
test_x_pa_2  = [0,0.02774131396,0.05102051618,0.08765846554,0.1122579843,0.1937055513,0.2208984299,0.2483965848,0.2716746346,0.2952444314,0.3224482327,0.3495979181,0.3742205505,0.3988044576,0.4530914171,0.5073997245,0.5345697654,0.5617686014,0.5878004755,0.6064226723,0.6168759842,0.6338685546,0.6586014039,0.677764708,0.6781317019,0.6804636404,0.6914033645,0.7122836578,0.7307627957,0.75]
test_x_rv_2  = [0,0.06238288838,0.09923293298,0.1173228674,0.1261879505,0.1447565358,0.1705496562,0.1946636351,0.2087194657,0.2296075276,0.3027766045,0.3419675437,0.3602097669,0.3861215508,0.4118755009,0.4374071017,0.463117273,0.48911431,0.5151770149,0.5411648357,0.5672528862,0.5931070665,0.6156608541,0.6341402822,0.6557704615,0.6736489568,0.6862475699,0.7063135033,0.732140034,0.75]
test_x_rvw_2 = [0,0.03713380808,0.07968296285,0.1426267922,0.1681939244,0.1938251949,0.2194825947,0.2451685004,0.270894789,0.2965996988,0.3223022327,0.3479952648,0.3737500592,0.3898699664,0.4443518972,0.4536620262,0.4764171541,0.4811655861,0.4999193327,0.5257358888,0.5514301086,0.5771231407,0.6028185482,0.6285982849,0.6496451449,0.6643383474,0.6822422288,0.7064660357,0.7322481477,0.75]
test_x_rip_2 = [0.0, 0.025862069, 0.051724138, 0.077586207, 0.103448276, 0.129310345, 0.155172414, 0.181034483, 0.206896552, 0.232758621, 0.25862069, 0.284482759, 0.310344828, 0.336206897, 0.362068966, 0.387931034, 0.413793103, 0.439655172, 0.465517241, 0.49137931, 0.517241379, 0.543103448, 0.568965517, 0.594827586, 0.620689655, 0.646551724, 0.672413793, 0.698275862, 0.724137931, 0.75]

test_y_svc_2 = [0.0200699432,-0.9466672251,-0.0090466867,0.0237890813,0.0240278098,-0.9396058886,0.0211756329,0.0299997906,0.0511779647,0.0930008661,0.1324032297,0.1650850807,0.2325037395,0.2721977004,0.3124748557,0.3483734605,0.3853458471,0.5053308393,0.5205983655,0.4904708605,0.4565009304,0.4026273842,0.3490301282,0.3181483736,0.2654151946,0.2284190821,0.2045310691,0.0739965328,0.0277879375,0.0200699432]
test_y_hra_2 = [-0.0635135135,-0.3013513514,-0.1030568001,-0.0679867033,-0.0369827046,-0.0288505083,-0.0247844101,-0.0245302789,-0.3,0.0026617527,-0.0085200173,-0.0130943778,-0.011569591,-0.0100448042,-0.0085200173,-0.0085200173,-0.0125861155,-0.0141109023,-0.0146191646,-0.0146191646,-0.0141109023,-0.0085200173,0.0077443754,0.0158765718,0.0179096209,0.0097774245,-0.0045555716,-0.0237678855,-0.0379992292,-0.0635135135]
test_y_ivc_2 = [0.0145571162,-0.081602663,0.0015994154,0.0023016394,0.0040863309,0.0042869799,0.0043783566,0.0085000833,0.0204630854,0.0234874623,0.0203131108,0.0086981849,0.0031595495,0.0024648701,0.0022522906,0.0020397111,0.000725189,-0.0006582045,-0.0017032062,-0.0008482787,0.0027615052,0.0059230827,0.0189714137,0.0229522175,0.0161811272,0.0011772458,-0.0100794884,-0.0050735671,0.0071881204,0.0145571162]
test_y_lra_2 = [0.0541984733,0.1854961832,-0.0039945624,0.0188356164,0.029972289,0.0344269581,0.1045801527,-0.2770992366,0.029972289,0.0438931298,0.0516888006,0.0567003033,0.0617118059,0.0695074767,0.0734053121,0.0739621458,0.0728484785,0.0667233086,0.0572571369,0.0461204643,0.0294154554,0.0277449545,0.0338701244,0.0433362961,0.0483477988,0.0533593015,0.0539161351,0.0572571369,0.0572571369,0.0541984733]
test_y_mra_2 = [0.0013727103,0.0148486554,0.1558697441,-0.3689386394,-0.0735850691,-0.0506363852,-0.015072539,0.0116202526,0.0210752456,0.0247650803,-0.2503139479,0.0423894687,0.0210063656,0.037514276,0.053407523,0.0631296015,0.071694586,0.0764025903,0.0780250104,0.0804188265,0.0862839248,0.0963917014,0.1018711017,0.0942367692,0.0700174217,0.0438695841,0.0304497813,0.0204979428,0.0205808886,0.0013727103]
test_y_pa_2  = [-0.0286999888,0.0793805542,-0.1152124189,-0.0120576855,-0.0024615402,-0.0007930576,-0.0051063523,-0.0128738466,-0.0241305938,-0.0373336694,-0.042864328,-0.0423635018,-0.0353434952,-0.0240073802,-0.0216223599,-0.0216167327,-0.0233846301,-0.0283619415,-0.0408422659,-0.0528776617,-0.07156179,-0.0853895306,-0.0906538322,-0.0804581752,-0.0663346909,-0.0511073257,-0.0322932077,-0.0208711207,-0.0169618164,-0.0286999888]
test_y_rv_2  = [-0.0022754112,-0.6299547798,0.0132089058,0.0345351944,0.0503219523,0.0600687648,0.0603273213,0.0501653286,0.0446009634,0.066551456,0.1709899479,0.0352136804,0.022246319,0.0184576555,0.0200521876,0.0292303456,0.0323180269,0.0256216519,0.0166855532,0.0103035253,0.0005029718,-0.0013210217,0.0078847317,0.0206724167,0.0275341306,0.0156905703,0.0034183106,-0.0040592617,-0.0049402137,-0.0022754112]
test_y_rvw_2 = [-0.0289940828,0.2,-0.5313609467,0.5206175417,0.5289953197,0.5331051731,0.5354762423,0.5359504562,0.5337374582,0.5329471018,0.5323148166,0.5323148166,0.5282049633,0.5240951099,0.1023668639,0.0828402367,0.0686390533,0.0526627219,0.0398437345,0.0316240278,0.0315449922,0.0315449922,0.0313869209,0.0256173191,0.0142203796,-0.0018080485,-0.0177732481,-0.0268623469,-0.03279002,-0.0289940828]
test_y_rip_2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

signals = Signals()

def is_close_enough(list_1, list_2, tolerance=1e-1):
    similar = True

    for i in range(min(len(list_1), len(list_2))):
        similar = isclose(list_1[i], list_2[i], abs_tol=tolerance)

    return similar

def test_SVC_V1():
    [x,y] = signals.get_signal('SVC', 80, 0)

    assert is_close_enough(x, test_x_svc)
    assert is_close_enough(y, test_y_svc)

def test_High_RA_V1():
    [x,y] = signals.get_signal('HRA', 80, 0)

    assert is_close_enough(x, test_x_hra_2)
    assert is_close_enough(y, test_y_hra_2)

def test_High_RA_V2():
    [x,y] = signals.get_signal('HRA', 80, 1)

    assert is_close_enough(x, test_x_hra)
    assert is_close_enough(y, test_y_hra)

def test_IVC_V1():
    [x,y] = signals.get_signal('IVC', 80, 0)

    assert is_close_enough(x, test_x_ivc_2)
    # assert is_close_enough(y, test_y_ivc_2)

def test_IVC_V2():
    [x,y] = signals.get_signal('IVC', 80, 1)

    assert is_close_enough(x, test_x_ivc)
    assert is_close_enough(y, test_y_ivc)

def test_Mid_RA_V1():
    [x,y] = signals.get_signal('MRA', 80, 0)

    # assert is_close_enough(x, test_x_mra)
    # assert is_close_enough(y, test_y_mra)

def test_Mid_RA_V2():
    [x,y] = signals.get_signal('MRA', 80, 1)

    assert is_close_enough(x, test_x_mra)
    assert is_close_enough(y, test_y_mra)

def test_Low_RA_V1():
    [x,y] = signals.get_signal('LRA', 80, 0)

    # assert is_close_enough(x, test_x_lra)
    # assert is_close_enough(y, test_y_lra)

def test_Low_RA_V2():
    [x,y] = signals.get_signal('LRA', 80, 1)

    assert is_close_enough(x, test_x_lra)
    assert is_close_enough(y, test_y_lra)

def test_PA_V1():
    [x,y] = signals.get_signal('PA', 80, 0)

    # assert is_close_enough(x, test_x_pa)
    # assert is_close_enough(y, test_y_pa)

def test_PA_V2():
    [x,y] = signals.get_signal('PA', 80, 1)

    assert is_close_enough(x, test_x_pa)
    assert is_close_enough(y, test_y_pa)

def test_RV_V1():
    [x,y] = signals.get_signal('RV', 80, 0)

    # assert is_close_enough(x, test_x_rv)
    # assert is_close_enough(y, test_y_rv)

def test_RV_V2():
    [x,y] = signals.get_signal('RV', 80, 1)

    assert is_close_enough(x, test_x_rv)
    assert is_close_enough(y, test_y_rv)

def test_RV_Wall_V1():
    [x,y] = signals.get_signal('RVW', 80, 0)

    # assert is_close_enough(x, test_x_rvw)
    assert is_close_enough(y, test_y_rvw_2)

def test_RV_Wall_V2():
    [x,y] = signals.get_signal('RVW', 80, 1)

    assert is_close_enough(x, test_x_rvw)
    assert is_close_enough(y, test_y_rvw)

def test_Default_Line():
    [x,y] = signals.get_signal('RIP', 80, 0)

    assert is_close_enough(x, test_x_rip)
    assert is_close_enough(y, test_y_rip)
