from guiserver import signals
from math import isclose

import numpy as np

test_x_svc = [0,0.053666111,0.094735819,0.099669242,0.14476342,0.181803262,0.208857244,0.227081483,0.246298053,0.25740922,0.264192805,0.268400682,0.279410598,0.28619303,0.292973155,0.29890317,0.305696367,0.343073285,0.36024323,0.386075546,0.39823004,0.412032904,0.422943238,0.428269984,0.437152894,0.44423869,0.44867034,0.468270184,0.479440435,0.75]
test_x_hra = [0,0.035786788,0.104342519,0.12550004,0.146448341,0.170090368,0.193523174,0.212889237,0.26225875,0.295570949,0.318219174,0.341207385,0.364509427,0.387811469,0.411113511,0.434337095,0.457351458,0.480496584,0.503694015,0.526917599,0.550167336,0.573678599,0.597739069,0.621381096,0.644709291,0.667514432,0.69000051,0.712235523,0.734726832,0.75]
test_x_ivc = [0,0.035063563,0.072549588,0.098868221,0.125121038,0.151405663,0.203981137,0.229248146,0.254357698,0.280585622,0.302243617,0.324071101,0.350470973,0.376773577,0.403066501,0.429359424,0.455674475,0.481990909,0.534589202,0.560860689,0.587076858,0.604852102,0.620551055,0.644882013,0.66473447,0.679118962,0.701878133,0.721494104,0.73157557,0.75]
test_x_lra = [0,0.058155619,0.098902848,0.117621706,0.13668599,0.155947663,0.181660203,0.225429127,0.285367676,0.304349717,0.323512695,0.342757919,0.362003142,0.381166121,0.400444241,0.419821056,0.439247217,0.458821419,0.478494313,0.498216555,0.518103285,0.537545895,0.556758221,0.575871853,0.595117076,0.633755563,0.67252564,0.711213474,0.730606737,0.75]
test_x_mra = [0,0.018570632,0.047056438,0.055386809,0.073408856,0.093496685,0.122405295,0.151045367,0.175684625,0.20049781,0.231523363,0.261573653,0.294224644,0.304905487,0.333218644,0.361344994,0.389436316,0.417410884,0.445292047,0.473196561,0.501206154,0.529344179,0.557342097,0.584943047,0.61204195,0.639082475,0.666508293,0.69287942,0.721873651,0.75]
test_x_pa  = [0,0.027741314,0.051020516,0.087658466,0.112257984,0.193705551,0.22089843,0.248396585,0.271674635,0.295244431,0.322448233,0.349597918,0.374220551,0.398804458,0.453091417,0.507399725,0.534569765,0.561768601,0.587800476,0.606422672,0.616875984,0.633868555,0.658601404,0.677764708,0.678131702,0.68046364,0.691403364,0.712283658,0.730762796,0.75]
test_x_rv  = [0,0.062382888,0.099232933,0.117322867,0.12618795,0.144756536,0.170549656,0.194663635,0.208719466,0.229607528,0.302776604,0.341967544,0.360209767,0.386121551,0.411875501,0.437407102,0.463117273,0.48911431,0.515177015,0.541164836,0.567252886,0.593107066,0.615660854,0.634140282,0.655770461,0.673648957,0.68624757,0.706313503,0.732140034,0.75]
test_x_rvw = [0,0.037133808,0.079682963,0.142626792,0.168193924,0.193825195,0.219482595,0.2451685,0.270894789,0.296599699,0.322302233,0.347995265,0.373750059,0.389869966,0.444351897,0.453662026,0.476417154,0.481165586,0.499919333,0.525735889,0.551430109,0.577123141,0.602818548,0.628598285,0.649645145,0.664338347,0.682242229,0.706466036,0.732248148,0.75]

test_y_svc = [0.200699432,-9.466672251,-0.090466867,0.237890813,0.240278098,-9.396058886,0.211756329,0.299997906,0.511779647,0.930008661,1.324032297,1.650850807,2.325037395,2.721977004,3.124748557,3.483734605,3.853458471,5.053308393,5.205983655,4.904708605,4.565009304,4.026273842,3.490301282,3.181483736,2.654151946,2.284190821,2.045310691,0.739965328,0.277879375,0.200699432]
test_y_hra = [-0.635135135,-3.013513514,-1.030568001,-0.679867033,-0.369827046,-0.288505083,-0.247844101,-0.245302789,-3,0.026617527,-0.085200173,-0.130943778,-0.11569591,-0.100448042,-0.085200173,-0.085200173,-0.125861155,-0.141109023,-0.146191646,-0.146191646,-0.141109023,-0.085200173,0.077443754,0.158765718,0.179096209,0.097774245,-0.045555716,-0.237678855,-0.379992292,-0.635135135]
test_y_ivc = [0.145571162,-0.81602663,0.015994154,0.023016394,0.040863309,0.042869799,0.043783566,0.085000833,0.204630854,0.234874623,0.203131108,0.086981849,0.031595495,0.024648701,0.022522906,0.020397111,0.00725189,-0.006582045,-0.017032062,-0.008482787,0.027615052,0.059230827,0.189714137,0.229522175,0.161811272,0.011772458,-0.100794884,-0.050735671,0.071881204,0.145571162]
test_y_lra = [0.541984733,1.854961832,-0.039945624,0.188356164,0.29972289,0.344269581,1.045801527,-2.770992366,0.29972289,0.438931298,0.516888006,0.567003033,0.617118059,0.695074767,0.734053121,0.739621458,0.728484785,0.667233086,0.572571369,0.461204643,0.294154554,0.277449545,0.338701244,0.433362961,0.483477988,0.533593015,0.539161351,0.572571369,0.572571369,0.541984733]
test_y_mra = [0.013727103,0.148486554,1.558697441,-3.689386394,-0.735850691,-0.506363852,-0.15072539,0.116202526,0.210752456,0.247650803,-2.503139479,0.423894687,0.210063656,0.37514276,0.53407523,0.631296015,0.71694586,0.764025903,0.780250104,0.804188265,0.862839248,0.963917014,1.018711017,0.942367692,0.700174217,0.438695841,0.304497813,0.204979428,0.205808886,0.013727103]
test_y_pa  = [-0.286999888,0.793805542,-1.152124189,-0.120576855,-0.024615402,-0.007930576,-0.051063523,-0.128738466,-0.241305938,-0.373336694,-0.42864328,-0.423635018,-0.353434952,-0.240073802,-0.216223599,-0.216167327,-0.233846301,-0.283619415,-0.408422659,-0.528776617,-0.7156179,-0.853895306,-0.906538322,-0.804581752,-0.663346909,-0.511073257,-0.322932077,-0.208711207,-0.169618164,-0.286999888]
test_y_rv  = [-0.022754112,-6.299547798,0.132089058,0.345351944,0.503219523,0.600687648,0.603273213,0.501653286,0.446009634,0.66551456,1.709899479,0.352136804,0.22246319,0.184576555,0.200521876,0.292303456,0.323180269,0.256216519,0.166855532,0.103035253,0.005029718,-0.013210217,0.078847317,0.206724167,0.275341306,0.156905703,0.034183106,-0.040592617,-0.049402137,-0.022754112]
test_y_rvw = [-0.289940828,2,-5.313609467,5.206175417,5.289953197,5.331051731,5.354762423,5.359504562,5.337374582,5.329471018,5.323148166,5.323148166,5.282049633,5.240951099,1.023668639,0.828402367,0.686390533,0.526627219,0.398437345,0.316240278,0.315449922,0.315449922,0.313869209,0.256173191,0.142203796,-0.018080485,-0.177732481,-0.268623469,-0.3279002,-0.289940828]

def is_close_enough(list_1, list_2):
    similar = True

    for i in range(min(len(list_1), len(list_2))):
        similar = isclose(list_1[i], list_2[i], abs_tol=1e-4)

    return similar

def test_SVC_V1():
    [x,y] = signals.SVC_V1(80)

    assert is_close_enough(x, test_x_svc)
    assert is_close_enough(y, test_y_svc)

def test_High_RA_V1():
    [x,y] = signals.High_RA_V1(80)

    # assert x == test_x

def test_High_RA_V2():
    [x,y] = signals.High_RA_V2(80)

    # assert x == test_x

def test_IVC_V1():
    [x,y] = signals.IVC_V1(80)

    # assert x == test_x

def test_IVC_V2():
    [x,y] = signals.IVC_V2(80)

    # assert x == test_x

def test_Mid_RA_V1():
    [x,y] = signals.Mid_RA_V1(80)

    # assert x == test_x

def test_Mid_RA_V2():
    [x,y] = signals.Mid_RA_V2(80)

    # assert x == test_x

def test_Low_RA_V1():
    [x,y] = signals.Low_RA_V1(80)

    # assert x == test_x

def test_Low_RA_V2():
    [x,y] = signals.Low_RA_V2(80)

    # assert x == test_x

def test_PA_V1():
    [x,y] = signals.PA_V1(80)

    # assert x == test_x

def test_PA_V2():
    [x,y] = signals.PA_V2(80)

    # assert x == test_x

def test_RV_V1():
    [x,y] = signals.RV_V1(80)

    # assert x == test_x

def test_RV_V2():
    [x,y] = signals.RV_V2(80)

    # assert x == test_x

def test_RV_Wall_V1():
    [x,y] = signals.RV_Wall_V1(80)

    # assert x == test_x

def test_RV_Wall_V2():
    [x,y] = signals.RV_Wall_V2(80)

    # assert x == test_x

def test_Default_Line():
    [x,y] = signals.Default_Line()
